---
services:
  ## Traefik 2 - Reverse Proxy
  ## Touch (create empty files) traefik.log and acme/acme.json.
  ## Set acme.json permissions to 600.
  ## touch $APPDIR/traefik2/acme/acme.json
  ## chmod 600 $APPDIR/traefik2/acme/acme.json
  ## touch $APPDIR/traefik2/traefik.log
  traefik:
    # <<: *common-keys-core
    container_name: traefik
    image: traefik:comte # comte=3.1.x
    security_opt:
      - no-new-privileges:true
    restart: always
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      ## Allow these IPs to set the X-Forwarded-* headers
      ## Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      ## Allows for ping/healthcheck at https://traefik.$DOMAINNAMEX/ping
      - --entryPoints.ping.address=:8081
      - --api=true
      - --api.insecure=true
      - --api.dashboard=true
      - --ping=true # Allow for ping/healthcheck
      # - --pilot.token=$TRAEFIK_PILOT_TOKEN
      # - --serversTransport.insecureSkipVerify=true
      - --log=true
      ## Default: ERROR; DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --log.level=INFO
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      ## Configuring a buffer of 100 lines
      - --accessLog.bufferingSize=100
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      ## Use Docker Socket Proxy instead for improved security
      # - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      ## Automatically set Host rule for services
      # - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME0`)
      - --providers.docker.exposedByDefault=false
      # - --entrypoints.https.http.middlewares=chain-oauth@file
      - --entrypoints.https.http.tls.options=tls-opts@file
      - --entrypoints.ping.http.tls.options=tls-opts@file
      ## Add dns-cloudflare as default certresolver for all services. Also
      ## enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      ## Pulls main and wildcard cert for first domain
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME0
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME0
      ## Pulls main and wildcard cert for second domain
      # - --entrypoints.https.http.tls.domains[1].main=$DOMAINNAME1
      # - --entrypoints.https.http.tls.domains[1].sans=*.$DOMAINNAME1
      - --providers.docker.network=t2_proxy
      ## Load dynamic configuration from one or more .toml or .yml files in a
      ## directory
      - --providers.file.directory=/rules
      ## Load dynamic configuration from a file
      #- --providers.file.filename=/path/to/file
      ## Only works on top level files in the rules folder
      - --providers.file.watch=true
      ## LetsEncrypt Staging Server - uncomment when testing
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      ## Optional. Used to specify the Key Type received from LetsEncrypt
      - --certificatesResolvers.dns-cloudflare.acme.keyType=EC384
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      ## To delay DNS check and reduce LE hitrate
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90
      ## Set Wireguard entrypoint
      - --entryPoints.wireguard.address=:$WIREGUARD_PORT/udp
      ## Set Minecraft entrypoint
      # - --entryPoints.minecraft.address=:25565
      ## Set minecraft-rcon entrypoint
      # - --entryPoints.minecraft-rcon.address=:4326
      ## Set minecraft-rcon-websocket entrypoint
      # - --entryPoints.minecraft-rcon-websocket.address=:4327
      ## Set Authentik LDAPS entrypoint
      - --entryPoints.authentik-ldaps.address=:$AUTHENTIK_LDAPS_PORT
    networks:
      t2_proxy:
        ipv4_address: $TRAEFIK_IPV4 # You can specify a static IP
      socket_proxy:
    # depends_on:
    #   - socket-proxy
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 5s
      retries: 3
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
      - target: 8081 # Conflicting internal ping/healthcheck port
        published: 8082 # To allow for redis at 8081
        protocol: tcp
        mode: host
      - target: $WIREGUARD_PORT # Port 80 UDP port for Wireguard
        published: $WIREGUARD_PORT
        protocol: udp
        mode: host
      - target: $AUTHENTIK_LDAPS_PORT # LDAPS port
        published: $AUTHENTIK_LDAPS_PORT
        protocol: tcp
        mode: host
    volumes:
      - $APPDIR/traefik2/rules:/rules # File provider directory
      ## Use Docker Socket Proxy instead for improved security
      # - /var/run/docker.sock:/var/run/docker.sock:ro
      ## Cert location - you must touch this file and change permissions to 600
      - $APPDIR/traefik2/acme/acme.json:/acme.json
      ## For fail2ban - make sure to touch file before starting container
      - $APPDIR/traefik2/traefik.log:/traefik.log
      - $DOCKERDIR/shared:/shared
    environment:
      CF_API_EMAIL_FILE: /run/secrets/cloudflare_email
      CF_API_KEY_FILE: /run/secrets/cloudflare_api_key
      ## HTPASSWD_FILE can be whatever as it is not used/called anywhere.
      HTPASSWD_FILE: /run/secrets/htpassword
      ## Include vars so they can be used in Traefik rules
      DOMAINNAME0: $DOMAINNAME0
      # DOMAINNAME1: $DOMAINNAME1
      HOMEBRIDGE_PORT: $HOMEBRIDGE_PORT
      HOME_ASSISTANT_PORT: $HOME_ASSISTANT_PORT
      SYNOLOGY_PORT: $SYNOLOGY_PORT
      SYNOLOGY_PHOTO_PORT: $SYNOLOGY_PHOTO_PORT
      PLEX_PORT: $PLEX_PORT
      QBITTORRENT_PORT: $QBITTORRENT_PORT
      QBITTORRENT_PRIVATE_PORT: $QBITTORRENT_PRIVATE_PORT
    secrets:
      - cloudflare_email
      - cloudflare_api_key
      - htpasswd
    labels:
      # - "autoheal=true"
      - "traefik.enable=true"
      ## HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      ## An example of a service available on both `abcxyz.$DOMAINNAME0`
      ## and `abcxyz.$DOMAINNAME1`
      - "traefik.http.routers.traefik0-rtr.entrypoints=https"
      # - "traefik.http.routers.traefik0-rtr.tls=true"
      - "traefik.http.routers.traefik0-rtr.rule=Host(`traefik.$DOMAINNAME0`)"
      # - "traefik.http.routers.traefik1-rtr.entrypoints=https"
      # - "traefik.http.routers.traefik1-rtr.tls=true"
      # - "traefik.http.routers.traefik1-rtr.rule=Host(`traefik.$DOMAINNAME1`)"
      ## Services - API
      - "traefik.http.routers.traefik0-rtr.service=api@internal"
      # - "traefik.http.routers.traefik1-rtr.service=api@internal"
      ## Healthcheck/ping
      - "traefik.http.routers.ping.rule=Host(`traefik.$DOMAINNAME0`) && Path(`/ping`)"
      # - "traefik.http.routers.ping.tls=true"
      - "traefik.http.routers.ping.service=ping@internal"
      ## Middlewares
      # - "traefik.http.routers.traefik0-rtr.middlewares=chain-basic-auth@file"
      - "traefik.http.routers.traefik0-rtr.middlewares=chain-authelia@file"
      # - "traefik.http.routers.traefik1-rtr.middlewares=chain-authelia1@file"
